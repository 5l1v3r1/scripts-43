#!/usr/bin/env ruby
#/ Usage: web_shot[options] ...
#/
#/ This script ...

$stderr.sync = true

require 'optparse'
require 'selenium-webdriver'


TIMEOUT = 15

# argument default values 

input = nil

# parse arguments

file = __FILE__
ARGV.options do |opts|
  opts.on("-i", "--input FILE", String) { |val| input = val }
  opts.on_tail("-h", "--help")          { exec "grep ^#/<'#{file}'|cut -c4-" }
  opts.parse!
end

# check arguments

if input.nil? then
  puts ARGV.options
  exit 1
end

if not File.exists?(input)
  puts "#{input} does not exist!"
  exit 1
end

# read in a list of urls ro process

URLS = File.readlines(input).each {|l| l.chomp!}

# configure the driver to run in headless mode
options = Selenium::WebDriver::Chrome::Options.new
options.add_argument('--headless')
#options.add_argument('--disable-gpu')
#options.add_argument('--no-sandbox')
#options.add_argument('--user-data-dir')
options.add_argument('--ignore-certificate-errors')
options.add_argument('--disable-popup-blocking')
options.add_argument('--disable-translate')
options.add_argument('--window-size=1024x768')

client = Selenium::WebDriver::Remote::Http::Default.new
client.read_timeout = TIMEOUT + 5

# process urls

URLS.each do |url|
  begin
    STDERR.puts "Starting browser"
    driver = Selenium::WebDriver.for :chrome, options: options, http_client: client
    driver.manage.timeouts.page_load = TIMEOUT
    STDERR.puts " - Navigating to #{url}"
    driver.navigate.to url
    #driver.manage.window.resize_to(1024, 768)
    filename = url.gsub(/:\/\//, '_').gsub(/\//, '.').gsub(/:/, '_')
    STDERR.puts " - Taking screenshot"
    driver.save_screenshot "#{filename}.png"
  rescue Selenium::WebDriver::Error::TimeOutError
    STDERR.puts ' - Timeout'
    next
  ensure
    begin
      STDERR.puts " - Closing browser"
      driver.quit
    end
  end
end

