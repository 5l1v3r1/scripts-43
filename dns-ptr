#!/usr/bin/env python3.7

###########
# IMPORTS #
###########

import sys
import argparse
import asyncio
import aiodns
from pypeln.task import TaskPool

#############
# FUNCTIONS #
#############

async def fetch(address, resolver):
    try:
        result = await resolver.gethostbyaddr(address)
        for host in result.aliases:
            sys.stdout.write('%s,%s\n' % (address, host))
            sys.stdout.flush()
    except Exception as e:
        try:
            err_number = e.args[0]
            err_text = e.args[1]
        except IndexError:
            sys.stderr.write(f"{address} => Couldn't parse exception: {e}\n")
        else:
            if err_number == 4:
                #sys.stderr.write(f"{address} => No record found.\n")
                pass
            elif err_number == 12:
                # Timeout from DNS server
                sys.stderr.write(f"{address} => Request timed out.\n")
            elif err_number == 1:
                # Server answered with no data
                pass
            else:
                sys.stderr.write(f"{address} =>  Unexpected exception: {e}\n")

async def run(loop, limit, addresses):
    resolver = aiodns.DNSResolver(loop=loop, rotate=True)
    async with TaskPool(limit) as tasks:
        for address in addresses:
            await tasks.put(fetch(address, resolver))


########
# MAIN #
########

if __name__ == '__main__':
    desc = 'Perform reverse DNS lookup on supplied IP addresses and output results in CSV format.'

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-n', '--nameservers',
                        nargs='?',
                        type=argparse.FileType('r'),
                        action='store',
                        help='file containing a list of nameservers split by a newline, otherwise use system resolver',
                        metavar='FILE',
                        default=None)
    parser.add_argument('file',
                        nargs='?',
                        type=argparse.FileType('r'),
                        action='store',
                        help='file containing a list of IP addresses split by a newline, otherwise read from STDIN',
                        metavar='FILE',
                        default=sys.stdin)
    parser.add_argument('-l', '--limit',
                        type=int,
                        action='store',
                        help='maximum number of queries to run asynchronosly (default: 100)',
                        metavar='INT',
                        default='100')
    args = parser.parse_args()

    try:
        addresses = [line.strip() for line in args.file if len(line.strip())>0 and line[0] is not '#']
    except KeyboardInterrupt:
        exit()
    
    # remove duplicates and sort results
    addresses = sorted(set(addresses))

    if args.nameservers:
        try:
            nameservers = [line.strip() for line in args.nameservers if len(line.strip())>0 and line[0] is not '#']
        except KeyboardInterrupt:
            exit()

    loop = asyncio.get_event_loop()

    try:
        loop.run_until_complete(run(loop, args.limit, addresses))
    except KeyboardInterrupt:
        sys.stderr.write("\nCaught keyboard interrupt, cleaning up...\n")
        asyncio.gather(*asyncio.Task.all_tasks()).cancel()
        loop.stop()
    finally:
        loop.close()