#!/usr/bin/env ruby
#/ Usage: nmap2docx [options] ...
#/
#/ This script takes an nmap generated xml file and generates a Word document 
#/ that contains a table with four columns: IP address, hostname, port, and 
#/ service. Only hosts with accessible ports are included. A CSV file 
#/ containing additional IP address and hostname pairs can also be specified.

$stderr.sync = true

require 'nmap/xml'
require 'sablon'
require 'optparse'
require 'csv'
require "set"

# argument default values 

output = nil
vhosts= nil
input  = Array.new

# parse arguments

file = __FILE__
ARGV.options do |opts|
  opts.on("-o", "--output FILE", String)            { |val| output = val }
  opts.on("-n", "--hostnames FILE", String)         { |val| vhosts = val }
  opts.on("-i", "--input FILE1,FILE2,FILE3", Array) { |val| input = val }
  opts.on_tail("-h", "--help")                      { exec "grep ^#/<'#{file}'|cut -c4-" }
  opts.parse!
end

# check arguments

if output.nil? then
  puts ARGV.options
  exit 1
end

if input.empty? then
  puts ARGV.options
  exit 1
end

input.each do |file|
  if not File.exists?(file)
    puts "#{file} does not exist!"
    exit 1
  end
end

if not vhosts.nil? and not File.exists?(vhosts)
  puts "#{vhosts} does not exist!"
  exit 1
end

# variables

hosts = Hash.new
hostnames = Hash.new
results = Array.new

# process hostnames csv file

puts "[+] Processing #{vhosts}"
CSV.foreach(vhosts) do |row|
  ip = row[0].strip
  hostname = row[1].strip.downcase
  unless hostname.empty?
    unless hostnames.key? ip
      hostnames[ip] = SortedSet.new
    end
    hostnames[ip] << hostname
  end
end

# process nmap xml files

input.each do |nmap|
  puts "[+] Processing #{nmap}"
  Nmap::XML.new(nmap) do |xml|
    xml.each_host do |host|

      host.each_hostname do |hostname|
        unless hostnames.key? host.ip
          hostnames[host.ip] = SortedSet.new
        end
        hostnames[host.ip] << hostname.name.strip.downcase
      end

      host.each_port do |port|
        if port.state == :open and not port.service.nil?
          if port.service.ssl?
            name = "ssl/#{port.service.name}"
          else
            name = port.service.name
          end
          unless name.include? 'tcpwrapped'
            unless hosts.key? host.ip
              hosts[host.ip] = Array.new
            end
            hosts[host.ip] << { :port => port.number, :proto => port.protocol, :name => name }
          end
        end
      end

    end
  end
end

# build data array ready for import

hosts.each do |ip, services|
  if hostnames.key? ip
    names = hostnames[ip].to_a
  else
    names = Array.new
  end
  results << { :ip => ip, :hostnames => names, :services => services.sort_by { |service| service[:port] } }
end

# import data into word document template

puts "[+] Generating #{output} ..."
context = { :hosts => results }
template = Sablon.template(File.expand_path(File.dirname(__FILE__) + "/nmap2docx.docx"))
template.render_to_file File.expand_path(output), context

