#!/usr/bin/env ruby

$stderr.sync = true

begin
  require 'nmap/xml'
rescue LoadError
  puts "The ruby-nmap gem could not be loaded, is it installed?"
  puts "-> gem install ruby-nmap"
  exit
end
begin
  require 'sablon'
rescue LoadError
  puts "The sablon gem could not be loaded, is it installed?"
  puts "-> gem install sablon"
  exit
end
begin
  require "docopt"
rescue LoadError
  puts "The docopt gem could not be loaded, is it installed?"
  puts "-> gem install docopt"
  exit
end
require 'csv'
require "set"

doc = <<DOCOPT
This script accepts nmap generated xml files and generates a Word document 
that contains a table with four columns: IP address, hostname, port, and 
service. Only hosts with accessible ports are included. A CSV file 
containing additional IP address and hostname pairs can also be specified.

Usage:
  #{__FILE__} -o <output> [-n <hostnames>] <xml>...
  #{__FILE__} -h | --help

Options:
  -o, --output=<output>         The generated document.
  -n, --hostnames=<hostnames>   CSV file containing IP addresses and hostnames.
  -h, --help                    Show this output.

DOCOPT

begin
  options = Docopt::docopt(doc)
rescue Docopt::Exit => e
  STDERR.puts e.message
  exit
end

# check arguments

options['<xml>'].each do |file|
  if not File.exists?(file)
    STDERR.puts "[!] #{file} does not exist!"
    exit 1
  end
end

if options['--hostnames'] and not File.exists?(options['--hostnames'])
  STDERR.puts "#{options['--hostnames']} does not exist!"
  exit 1
end

# variables

hosts = Hash.new
hostnames = Hash.new
results = Array.new

# process hostnames csv file

if options['--hostnames']
  puts "[+] Processing hostnames in #{options['--hostnames']}"
  CSV.foreach(options['--hostnames']) do |row|
    ip = row[0].strip
    hostname = row[1].strip.downcase
    unless hostname.empty?
      unless hostnames.key? ip
        hostnames[ip] = SortedSet.new
      end
      hostnames[ip] << hostname
    end
  end
end

# process nmap xml files

options['<xml>'].each do |nmap|
  puts "[+] Processing nmap results in #{nmap}"
  Nmap::XML.new(nmap) do |xml|
    xml.each_host do |host|

      host.each_hostname do |hostname|
        unless hostnames.key? host.ip
          hostnames[host.ip] = SortedSet.new
        end
        hostnames[host.ip] << hostname.name.strip.downcase
      end

      host.each_port do |port|
        if port.state == :open 
          unless port.service.nil?
            if port.service.ssl?
              name = "ssl/#{port.service.name}"
            else
              name = port.service.name
            end
            unless name.include? 'tcpwrapped'
              unless hosts.key? host.ip
                hosts[host.ip] = Array.new
              end
              hosts[host.ip] << { :port => port.number, :proto => port.protocol, :name => name }
            end
          else
            hosts[host.ip] << { :port => port.number, :proto => port.protocol, :name => 'unknown' }
          end
        end
      end

    end
  end
end

# build data array ready for import

hosts.each do |ip, services|
  if hostnames.key? ip
    names = hostnames[ip].to_a
  else
    names = Array.new
  end
  results << { :ip => ip, :hostnames => names, :services => services.sort_by { |service| service[:port] } }
end

# import data into word document template

puts "[+] Generating document #{options['--output']} ..."
context = { :hosts => results }
template = Sablon.template(File.expand_path(File.dirname(__FILE__) + "/nmap2docx.docx"))
template.render_to_file File.expand_path(options['--output']), context

