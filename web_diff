#!/usr/bin/env ruby
#/ Usage: web_diff [options] ...
#/
#/ This script ...

$stdout.sync = $stderr.sync = true

require 'typhoeus'
require 'digest'
require 'optparse'
require 'csv'
require "set"

# constant variables

USER_AGENTS = File.readlines(File.expand_path(File.dirname(__FILE__) + "/wordlists/web/user_agents.txt")).each {|line| line.chomp!}
METHOD = 'GET'
MAX_CONCURRENCY = 100
IGNORE_STATUS_CODES = []
IGNORE_CONTENT_LENGTH = []

# argument default values 

vhosts = nil
input = Array.new

# parse arguments

file = __FILE__
ARGV.options do |opts|
    opts.on("-n", "--hostnames FILE", String)         { |val| vhosts = val }
    opts.on("-i", "--input FILE1,FILE2,FILE3", Array) { |val| input = val }
    opts.on_tail("-h", "--help")                      { exec "grep ^#/<'#{file}'|cut -c4-" }
    opts.parse!
end

# check arguments

if input.empty? then
    puts ARGV.options
    exit 1
end

input.each do |file|
    if not File.exists?(file)
        puts "#{file} does not exist!"
        exit 1
    end
end

if not vhosts.nil? and not File.exists?(vhosts)
    puts "#{vhosts} does not exist!"
    exit 1
end

# variables

urls = Array.new
hostnames = Hash.new

# read in a list of urls to process

input.each do |i|
    urls += File.readlines(i).each {|l| l.chomp!}
end

urls.each do |url|
    uri = URI(url)
    unless hostnames.key? uri.host
      hostnames[uri.host] = SortedSet.new
    end
    hostnames[uri.host] << uri.host
end

# process hostnames csv file

if not vhosts.nil?
  CSV.foreach(vhosts) do |row|
    ip = row[0].strip
    hostname = row[1].strip.downcase
    unless hostname.empty?
      unless hostnames.key? ip
        hostnames[ip] = SortedSet.new
      end
      hostnames[ip] << hostname
    end
  end
end


Typhoeus::Config.user_agent = USER_AGENTS.sample
hydra = Typhoeus::Hydra.new(max_concurrency: MAX_CONCURRENCY)

urls.each do |url|
    uri = URI(url)
    hostnames[uri.host].each do |vhost|
        resolve = Ethon::Curl.slist_append(nil, "#{vhost}:#{uri.port}:#{uri.host}")

        request = Typhoeus::Request.new(
            url,
            resolve: resolve,
            method: METHOD,
            followlocation: false,
            connecttimeout: 5,
            timeout: 10,
            ssl_verifyhost: 0,
            ssl_verifypeer: false
        )

        request.on_complete do |response|
            if response.timed_out?
                STDERR.puts "#{url},TMO,#{METHOD},0,,#{vhost}"
            elsif response.code.zero?
                # Could not get an http response, something's wrong.
                STDERR.puts "#{url},ERR,#{METHOD},0,,#{vhost}"
            else
                content_length = response.headers['content-length'].nil? ? response.body.size : response.headers['content-length']

                next if IGNORE_CONTENT_LENGTH.include? content_length
                next if IGNORE_STATUS_CODES.include? response.code

                headers = response.headers.dup.tap { |h| ['date', 'set-cookie'].map { |k| h.delete(k) } }
                headers_hash = Digest::MD5.hexdigest(headers.to_s)
                body_hash = METHOD == 'GET' ? Digest::MD5.hexdigest(response.body) : String.new

                puts "#{url},#{vhost},#{METHOD},#{response.code},#{content_length},#{body_hash},#{headers_hash}"
            end
        end

        hydra.queue request
    end
end

hydra.run
